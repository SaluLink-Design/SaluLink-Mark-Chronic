'use client';

import { useState } from 'react';
import { motion } from 'framer-motion';
import { Download, FileText, CheckCircle, ArrowLeft, Eye, Printer } from 'lucide-react';
import { ClaimPackage } from '@/types';
import jsPDF from 'jspdf';

interface ClaimExportStageProps {
  claimPackage?: ClaimPackage;
  onPrevious: () => void;
}

export default function ClaimExportStage({ claimPackage, onPrevious }: ClaimExportStageProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isPreviewMode, setIsPreviewMode] = useState(false);

  const generatePDF = async () => {
    if (!claimPackage) return;
    
    setIsGenerating(true);
    
    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      let yPosition = 20;

      // Header
      pdf.setFontSize(20);
      pdf.setFont('helvetica', 'bold');
      pdf.text('SaluLink Specialist Aid - PMB Claim Package', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 15;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Claim ID: ${claimPackage.claimId}`, 20, yPosition);
      pdf.text(`Generated: ${claimPackage.createdAt.toLocaleDateString()}`, pageWidth - 20, yPosition, { align: 'right' });
      yPosition += 20;

      // Condition Information
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CONFIRMED CONDITION', 20, yPosition);
      yPosition += 10;

      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Condition: ${claimPackage.condition.condition}`, 20, yPosition);
      yPosition += 7;
      pdf.text(`ICD-10 Code: ${claimPackage.condition.icd10Code}`, 20, yPosition);
      yPosition += 7;
      pdf.text(`Description: ${claimPackage.condition.icd10Description}`, 20, yPosition);
      yPosition += 15;

      // Selected Procedures
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text('SELECTED PROCEDURES & TESTS', 20, yPosition);
      yPosition += 10;

      claimPackage.selectedProcedures.forEach((proc, index) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'bold');
        pdf.text(`${index + 1}. ${proc.procedure.procedureDescription}`, 20, yPosition);
        yPosition += 7;

        pdf.setFont('helvetica', 'normal');
        pdf.text(`   Code: ${proc.procedure.procedureCode}`, 20, yPosition);
        yPosition += 5;
        pdf.text(`   Quantity: ${proc.quantity}`, 20, yPosition);
        yPosition += 5;
        pdf.text(`   Type: ${proc.procedure.basketType === 'diagnostic' ? 'Diagnostic Basket' : 'Ongoing Management Basket'}`, 20, yPosition);
        yPosition += 5;
        pdf.text(`   Coverage Limit: ${proc.procedure.coverageLimit}`, 20, yPosition);
        yPosition += 10;
      });

      // Supporting Evidence
      if (claimPackage.supportingEvidence.length > 0) {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 20;
        }

        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        pdf.text('SUPPORTING EVIDENCE', 20, yPosition);
        yPosition += 10;

        pdf.setFontSize(12);
        pdf.setFont('helvetica', 'normal');
        claimPackage.supportingEvidence.forEach((file, index) => {
          if (yPosition > pageHeight - 20) {
            pdf.addPage();
            yPosition = 20;
          }
          pdf.text(`${index + 1}. ${file.name}`, 20, yPosition);
          yPosition += 7;
        });
      }

      // Footer
      const totalPages = pdf.getNumberOfPages();
      for (let i = 1; i <= totalPages; i++) {
        pdf.setPage(i);
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`Page ${i} of ${totalPages}`, pageWidth / 2, pageHeight - 10, { align: 'center' });
        pdf.text('Generated by SaluLink Specialist Aid Documentation App', pageWidth / 2, pageHeight - 5, { align: 'center' });
      }

      // Download the PDF
      pdf.save(`PMB_Claim_${claimPackage.claimId}.pdf`);
      
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  const printClaim = () => {
    window.print();
  };

  if (!claimPackage) {
    return (
      <div className="max-w-4xl mx-auto">
        <div className="card text-center">
          <div className="animate-pulse">
            <FileText className="w-16 h-16 text-primary-600 mx-auto mb-4" />
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              No Claim Package Available
            </h2>
            <p className="text-gray-600">
              Please complete the previous steps to generate a claim package.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="max-w-6xl mx-auto"
    >
      <div className="card">
        <div className="card-header">
          <h2 className="text-2xl font-bold text-gray-900 flex items-center">
            <FileText className="w-6 h-6 mr-3 text-primary-600" />
            Claim Compilation & Export
          </h2>
          <p className="text-gray-600 mt-2">
            Review your compiled claim package and export it for medical aid submission.
          </p>
        </div>

        <div className="space-y-8">
          {/* Claim Summary */}
          <div className="bg-success-50 border border-success-200 rounded-lg p-6">
            <div className="flex items-center mb-4">
              <CheckCircle className="w-6 h-6 text-success-600 mr-2" />
              <h3 className="text-lg font-semibold text-success-900">Claim Package Ready</h3>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="font-medium text-success-800">Claim ID:</span>
                <p className="text-success-700">{claimPackage.claimId}</p>
              </div>
              <div>
                <span className="font-medium text-success-800">Generated:</span>
                <p className="text-success-700">{claimPackage.createdAt.toLocaleString()}</p>
              </div>
              <div>
                <span className="font-medium text-success-800">Status:</span>
                <p className="text-success-700">PMB Compliant</p>
              </div>
            </div>
          </div>

          {/* Condition Details */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Confirmed Condition</h3>
            <div className="bg-white border border-gray-200 rounded-lg p-4">
              <h4 className="font-semibold text-gray-900">{claimPackage.condition.condition}</h4>
              <div className="mt-2 space-y-1 text-sm text-gray-600">
                <p><span className="font-medium">ICD-10 Code:</span> {claimPackage.condition.icd10Code}</p>
                <p><span className="font-medium">Description:</span> {claimPackage.condition.icd10Description}</p>
              </div>
            </div>
          </div>

          {/* Selected Procedures */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Selected Procedures ({claimPackage.selectedProcedures.length})
            </h3>
            <div className="space-y-4">
              {claimPackage.selectedProcedures.map((proc, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                  className="bg-white border border-gray-200 rounded-lg p-4"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <h4 className="font-semibold text-gray-900">{proc.procedure.procedureDescription}</h4>
                      <div className="mt-2 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-600">
                        <div>
                          <span className="font-medium">Code:</span>
                          <p>{proc.procedure.procedureCode}</p>
                        </div>
                        <div>
                          <span className="font-medium">Quantity:</span>
                          <p>{proc.quantity}</p>
                        </div>
                        <div>
                          <span className="font-medium">Type:</span>
                          <p>{proc.procedure.basketType === 'diagnostic' ? 'Diagnostic' : 'Ongoing Management'}</p>
                        </div>
                        <div>
                          <span className="font-medium">Coverage:</span>
                          <p>{proc.procedure.coverageLimit} tests</p>
                        </div>
                      </div>
                    </div>
                    <span className={`
                      inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                      ${proc.procedure.basketType === 'diagnostic' 
                        ? 'bg-blue-100 text-blue-800' 
                        : 'bg-green-100 text-green-800'
                      }
                    `}>
                      {proc.procedure.basketType === 'diagnostic' ? 'Diagnostic' : 'Ongoing Management'}
                    </span>
                  </div>
                </motion.div>
              ))}
            </div>
          </div>

          {/* Supporting Evidence */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 mb-4">
              Supporting Evidence ({claimPackage.supportingEvidence.length} files)
            </h3>
            {claimPackage.supportingEvidence.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {claimPackage.supportingEvidence.map((file, index) => (
                  <div key={index} className="bg-white border border-gray-200 rounded-lg p-4">
                    <div className="flex items-center">
                      <FileText className="w-5 h-5 text-gray-400 mr-2" />
                      <span className="text-sm font-medium text-gray-900 truncate">
                        {file.name}
                      </span>
                    </div>
                    <p className="text-xs text-gray-500 mt-1">
                      {(file.size / 1024).toFixed(1)} KB
                    </p>
                  </div>
                ))}
              </div>
            ) : (
              <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-center">
                <p className="text-gray-500">No supporting evidence files</p>
              </div>
            )}
          </div>

          {/* PMB Compliance Statement */}
          <div className="bg-primary-50 border border-primary-200 rounded-lg p-6">
            <h3 className="font-semibold text-primary-900 mb-3">PMB Compliance Statement</h3>
            <p className="text-primary-800 text-sm leading-relaxed">
              This claim package has been compiled in accordance with the Prescribed Minimum Benefits (PMB) 
              regulations for chronic conditions. All selected procedures and tests are covered under the 
              PMB treatment baskets for {claimPackage.condition.condition} (ICD-10: {claimPackage.condition.icd10Code}). 
              The supporting evidence provided substantiates the medical necessity of the requested procedures.
            </p>
          </div>

          {/* Action Buttons */}
          <div className="flex justify-between pt-6 border-t border-gray-200">
            <button
              onClick={onPrevious}
              className="btn-secondary flex items-center"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Evidence Upload
            </button>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setIsPreviewMode(!isPreviewMode)}
                className="btn-secondary flex items-center"
              >
                <Eye className="w-4 h-4 mr-2" />
                {isPreviewMode ? 'Hide Preview' : 'Preview'}
              </button>
              
              <button
                onClick={printClaim}
                className="btn-secondary flex items-center"
              >
                <Printer className="w-4 h-4 mr-2" />
                Print
              </button>
              
              <button
                onClick={generatePDF}
                disabled={isGenerating}
                className="btn-primary flex items-center disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isGenerating ? (
                  <>
                    <div className="w-4 h-4 mr-2 border-2 border-white border-t-transparent rounded-full animate-spin" />
                    Generating...
                  </>
                ) : (
                  <>
                    <Download className="w-4 h-4 mr-2" />
                    Export PDF
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Print Styles */}
      <style jsx global>{`
        @media print {
          .no-print {
            display: none !important;
          }
          
          body {
            font-size: 12px;
            line-height: 1.4;
          }
          
          .card {
            box-shadow: none;
            border: 1px solid #000;
          }
        }
      `}</style>
    </motion.div>
  );
}
